/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Bankroll } from "@prisma/client";

export class BankrollServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.BankrollCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.BankrollCountArgs>
  ): Promise<number> {
    return this.prisma.bankroll.count(args);
  }

  async bankrolls<T extends Prisma.BankrollFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BankrollFindManyArgs>
  ): Promise<Bankroll[]> {
    return this.prisma.bankroll.findMany(args);
  }
  async bankroll<T extends Prisma.BankrollFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BankrollFindUniqueArgs>
  ): Promise<Bankroll | null> {
    return this.prisma.bankroll.findUnique(args);
  }
  async createBankroll<T extends Prisma.BankrollCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BankrollCreateArgs>
  ): Promise<Bankroll> {
    return this.prisma.bankroll.create<T>(args);
  }
  async updateBankroll<T extends Prisma.BankrollUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BankrollUpdateArgs>
  ): Promise<Bankroll> {
    return this.prisma.bankroll.update<T>(args);
  }
  async deleteBankroll<T extends Prisma.BankrollDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BankrollDeleteArgs>
  ): Promise<Bankroll> {
    return this.prisma.bankroll.delete(args);
  }
}
