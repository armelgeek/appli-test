/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Bankroll } from "./Bankroll";
import { BankrollCountArgs } from "./BankrollCountArgs";
import { BankrollFindManyArgs } from "./BankrollFindManyArgs";
import { BankrollFindUniqueArgs } from "./BankrollFindUniqueArgs";
import { CreateBankrollArgs } from "./CreateBankrollArgs";
import { UpdateBankrollArgs } from "./UpdateBankrollArgs";
import { DeleteBankrollArgs } from "./DeleteBankrollArgs";
import { BankrollService } from "../bankroll.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Bankroll)
export class BankrollResolverBase {
  constructor(
    protected readonly service: BankrollService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Bankroll",
    action: "read",
    possession: "any",
  })
  async _bankrollsMeta(
    @graphql.Args() args: BankrollCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Bankroll])
  @nestAccessControl.UseRoles({
    resource: "Bankroll",
    action: "read",
    possession: "any",
  })
  async bankrolls(
    @graphql.Args() args: BankrollFindManyArgs
  ): Promise<Bankroll[]> {
    return this.service.bankrolls(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Bankroll, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Bankroll",
    action: "read",
    possession: "own",
  })
  async bankroll(
    @graphql.Args() args: BankrollFindUniqueArgs
  ): Promise<Bankroll | null> {
    const result = await this.service.bankroll(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Bankroll)
  @nestAccessControl.UseRoles({
    resource: "Bankroll",
    action: "create",
    possession: "any",
  })
  async createBankroll(
    @graphql.Args() args: CreateBankrollArgs
  ): Promise<Bankroll> {
    return await this.service.createBankroll({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Bankroll)
  @nestAccessControl.UseRoles({
    resource: "Bankroll",
    action: "update",
    possession: "any",
  })
  async updateBankroll(
    @graphql.Args() args: UpdateBankrollArgs
  ): Promise<Bankroll | null> {
    try {
      return await this.service.updateBankroll({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Bankroll)
  @nestAccessControl.UseRoles({
    resource: "Bankroll",
    action: "delete",
    possession: "any",
  })
  async deleteBankroll(
    @graphql.Args() args: DeleteBankrollArgs
  ): Promise<Bankroll | null> {
    try {
      return await this.service.deleteBankroll(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
